
GPIO_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002790  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c8  080029c8  00004428  2**0
                  CONTENTS
  4 .ARM          00000000  080029c8  080029c8  00004428  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c8  080029c8  00004428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080029c8  080029c8  000039c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080029d0  080029d0  000039d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000428  20000000  080029d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000428  08002e00  00004428  2**2
                  ALLOC
 10 RAM1_region   00000000  20000588  20000588  00004428  2**0
                  CONTENTS
 11 RAM2_region   00000000  20009000  20009000  00004428  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000588  20000588  00004588  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000a32b  00000000  00000000  00004452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000097  00000000  00000000  0000e77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   000087c8  00000000  00000000  0000e814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001c10  00000000  00000000  00016fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000be8  00000000  00000000  00018bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab3ee  00000000  00000000  000197d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000008da  00000000  00000000  000c4bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0001b8da  00000000  00000000  000c54a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000e0d7a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002f94  00000000  00000000  000e0dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000428 	.word	0x20000428
 8000154:	00000000 	.word	0x00000000
 8000158:	080028ac 	.word	0x080028ac

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000042c 	.word	0x2000042c
 8000174:	080028ac 	.word	0x080028ac

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	@ (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fa02 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	@ (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	@ (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	@ (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	@ (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	@ (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f002 fb4f 	bl	8002848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 f875 	bl	8000298 <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 80001bc:	080029d8 	.word	0x080029d8
  ldr r2, =_sbss
 80001c0:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 80001c4:	20000588 	.word	0x20000588

080001c8 <ADC_IRQHandler>:
  * @retval : None
  */
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>

080001ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4313      	orrs	r3, r2
 80001e0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4013      	ands	r3, r2
 80001ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001ee:	68fb      	ldr	r3, [r7, #12]
}
 80001f0:	bf00      	nop
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
	...

080001fc <sampling>:

uint32_t pulse_cnt = 0;
bool is_sampling = false;

bool sampling(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	static uint32_t start_ms = 0;

	const uint32_t current_ms = HAL_GetTick();
 8000202:	f000 fa31 	bl	8000668 <HAL_GetTick>
 8000206:	6078      	str	r0, [r7, #4]
	static uint32_t pin_set_cnt = 0;

	static uint32_t samples_cnt = 0;

	//Coletar uma amostra por seg
	if (current_ms < (start_ms + 1))
 8000208:	4b1e      	ldr	r3, [pc, #120]	@ (8000284 <sampling+0x88>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	429a      	cmp	r2, r3
 8000212:	d201      	bcs.n	8000218 <sampling+0x1c>
	{
		return true;
 8000214:	2301      	movs	r3, #1
 8000216:	e031      	b.n	800027c <sampling+0x80>
	}

	//Atualizando o tempo
	start_ms = current_ms;
 8000218:	4a1a      	ldr	r2, [pc, #104]	@ (8000284 <sampling+0x88>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	6013      	str	r3, [r2, #0]

	//Verificar se o pino está setado e registrar
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 800021e:	2104      	movs	r1, #4
 8000220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000224:	f000 fcba 	bl	8000b9c <HAL_GPIO_ReadPin>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d104      	bne.n	8000238 <sampling+0x3c>
	{
		pin_set_cnt++;
 800022e:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <sampling+0x8c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	3301      	adds	r3, #1
 8000234:	4a14      	ldr	r2, [pc, #80]	@ (8000288 <sampling+0x8c>)
 8000236:	6013      	str	r3, [r2, #0]
	}

	//Encrementar o número de amostras
	samples_cnt++;
 8000238:	4b14      	ldr	r3, [pc, #80]	@ (800028c <sampling+0x90>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	4a13      	ldr	r2, [pc, #76]	@ (800028c <sampling+0x90>)
 8000240:	6013      	str	r3, [r2, #0]

	//Verificar se existem amostras o suficiente
	if (samples_cnt < 10)
 8000242:	4b12      	ldr	r3, [pc, #72]	@ (800028c <sampling+0x90>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b09      	cmp	r3, #9
 8000248:	d801      	bhi.n	800024e <sampling+0x52>
	{
		return true;
 800024a:	2301      	movs	r3, #1
 800024c:	e016      	b.n	800027c <sampling+0x80>
	}

	samples_cnt = 0;
 800024e:	4b0f      	ldr	r3, [pc, #60]	@ (800028c <sampling+0x90>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

	//Verificar se existe no mínimo 80% de sucesso
	if (pin_set_cnt > 8)
 8000254:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <sampling+0x8c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b08      	cmp	r3, #8
 800025a:	d90b      	bls.n	8000274 <sampling+0x78>
	{
		pulse_cnt++;
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <sampling+0x94>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a0b      	ldr	r2, [pc, #44]	@ (8000290 <sampling+0x94>)
 8000264:	6013      	str	r3, [r2, #0]
		PRINT(1,"New Sample: %u.\n", pulse_cnt);
 8000266:	4b0a      	ldr	r3, [pc, #40]	@ (8000290 <sampling+0x94>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	461a      	mov	r2, r3
 800026c:	4909      	ldr	r1, [pc, #36]	@ (8000294 <sampling+0x98>)
 800026e:	2000      	movs	r0, #0
 8000270:	f002 faca 	bl	8002808 <SEGGER_RTT_printf>
	}

	pin_set_cnt = 0;
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <sampling+0x8c>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]

	return false;
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	2000044c 	.word	0x2000044c
 8000288:	20000450 	.word	0x20000450
 800028c:	20000454 	.word	0x20000454
 8000290:	20000444 	.word	0x20000444
 8000294:	080028c8 	.word	0x080028c8

08000298 <main>:

int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 f977 	bl	8000590 <HAL_Init>
  SEGGER_RTT_Init();
 80002a2:	f001 ff43 	bl	800212c <SEGGER_RTT_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a6:	f000 f83d 	bl	8000324 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  /* -1- Initialize LEDs mounted on NUCLEO-WL55JC RevC board */
  BSP_LED_Init(LED3);
 80002aa:	2002      	movs	r0, #2
 80002ac:	f000 f916 	bl	80004dc <BSP_LED_Init>

  /* -2- Configure External line 0 (connected to PA.00 pin) in interrupt mode */
  EXTI2_IRQHandler_Config();
 80002b0:	f000 f88a 	bl	80003c8 <EXTI2_IRQHandler_Config>

  /* USER CODE END 2 */
  for (int i = 0; i < 10; i++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	e008      	b.n	80002cc <main+0x34>
  {
	  BSP_LED_Toggle(LED3);
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 f948 	bl	8000550 <BSP_LED_Toggle>
	  HAL_Delay(200);
 80002c0:	20c8      	movs	r0, #200	@ 0xc8
 80002c2:	f000 f9db 	bl	800067c <HAL_Delay>
  for (int i = 0; i < 10; i++)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3301      	adds	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b09      	cmp	r3, #9
 80002d0:	ddf3      	ble.n	80002ba <main+0x22>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 uint32_t now_ms = HAL_GetTick();
 80002d2:	f000 f9c9 	bl	8000668 <HAL_GetTick>
 80002d6:	6038      	str	r0, [r7, #0]
	 static uint32_t init_ms = 0;

	 if ((now_ms - init_ms) >= 20000)
 80002d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <main+0x7c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d909      	bls.n	80002fc <main+0x64>
	 {
		 init_ms = now_ms;
 80002e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <main+0x7c>)
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	6013      	str	r3, [r2, #0]
		 PRINT(1,"Total sample count: %u.\n", pulse_cnt);
 80002ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <main+0x80>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	4909      	ldr	r1, [pc, #36]	@ (800031c <main+0x84>)
 80002f6:	2000      	movs	r0, #0
 80002f8:	f002 fa86 	bl	8002808 <SEGGER_RTT_printf>
	 }

    /* USER CODE END WHILE */
	//Fica Amostrando até obter o resultado
	if (is_sampling == true)
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <main+0x88>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0e6      	beq.n	80002d2 <main+0x3a>
	{
		is_sampling = sampling();
 8000304:	f7ff ff7a 	bl	80001fc <sampling>
 8000308:	4603      	mov	r3, r0
 800030a:	461a      	mov	r2, r3
 800030c:	4b04      	ldr	r3, [pc, #16]	@ (8000320 <main+0x88>)
 800030e:	701a      	strb	r2, [r3, #0]
  {
 8000310:	e7df      	b.n	80002d2 <main+0x3a>
 8000312:	bf00      	nop
 8000314:	20000458 	.word	0x20000458
 8000318:	20000444 	.word	0x20000444
 800031c:	080028dc 	.word	0x080028dc
 8000320:	20000448 	.word	0x20000448

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09a      	sub	sp, #104	@ 0x68
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0320 	add.w	r3, r7, #32
 800032e:	2248      	movs	r2, #72	@ 0x48
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fa80 	bl	8002838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800034a:	4b1e      	ldr	r3, [pc, #120]	@ (80003c4 <SystemClock_Config+0xa0>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000352:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <SystemClock_Config+0xa0>)
 8000354:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <SystemClock_Config+0xa0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000366:	2320      	movs	r3, #32
 8000368:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800036e:	2300      	movs	r3, #0
 8000370:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000372:	23b0      	movs	r3, #176	@ 0xb0
 8000374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000376:	2300      	movs	r3, #0
 8000378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0320 	add.w	r3, r7, #32
 800037e:	4618      	mov	r0, r3
 8000380:	f000 ff28 	bl	80011d4 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800038a:	f000 f857 	bl	800043c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800038e:	234f      	movs	r3, #79	@ 0x4f
 8000390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fa94 	bl	80018d8 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003b6:	f000 f841 	bl	800043c <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3768      	adds	r7, #104	@ 0x68
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	58000400 	.word	0x58000400

080003c8 <EXTI2_IRQHandler_Config>:
  * @brief  Configures EXTI line 0 (connected to PA.00 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI2_IRQHandler_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;


  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ce:	2001      	movs	r0, #1
 80003d0:	f7ff fefb 	bl	80001ca <LL_AHB2_GRP1_EnableClock>

  /* Configure PA.00 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 80003d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003d8:	60bb      	str	r3, [r7, #8]


  GPIO_InitStructure.Pull = GPIO_PULLUP;
 80003da:	2301      	movs	r3, #1
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = BUTTON_SW1_PIN;
 80003de:	2304      	movs	r3, #4
 80003e0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ea:	f000 fa77 	bl	80008dc <HAL_GPIO_Init>


  /* Enable and set line 0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2102      	movs	r1, #2
 80003f2:	2008      	movs	r0, #8
 80003f4:	f000 fa3d 	bl	8000872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003f8:	2008      	movs	r0, #8
 80003fa:	f000 fa54 	bl	80008a6 <HAL_NVIC_EnableIRQ>
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	80fb      	strh	r3, [r7, #6]
  //Autoriza a amostra se o botão for setado
  if (GPIO_Pin == BUTTON_SW1_PIN)
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d10a      	bne.n	800042e <HAL_GPIO_EXTI_Callback+0x26>
  {
	  if (is_sampling == false)
 8000418:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <HAL_GPIO_EXTI_Callback+0x30>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	f083 0301 	eor.w	r3, r3, #1
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <HAL_GPIO_EXTI_Callback+0x26>
	  {
		  is_sampling = true;
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <HAL_GPIO_EXTI_Callback+0x30>)
 8000428:	2201      	movs	r2, #1
 800042a:	701a      	strb	r2, [r3, #0]
	  }
  }
  return;
 800042c:	bf00      	nop
 800042e:	bf00      	nop
}
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	20000448 	.word	0x20000448

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <Error_Handler+0x4>

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <MemManage_Handler+0x4>

0800046c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000494:	f000 f8d6 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}

0800049c <EXTI2_IRQHandler>:
  * @brief  This function handles external line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80004a0:	2004      	movs	r0, #4
 80004a2:	f000 fbc3 	bl	8000c2c <HAL_GPIO_EXTI_IRQHandler>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}

080004aa <LL_AHB2_GRP1_EnableClock>:
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4313      	orrs	r3, r2
 80004c0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
	...

080004dc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ffd7 	bl	80004aa <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <BSP_LED_Init+0x6c>)
 8000500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000504:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800050e:	2302      	movs	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <BSP_LED_Init+0x70>)
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	f107 020c 	add.w	r2, r7, #12
 800051e:	4611      	mov	r1, r2
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f9db 	bl	80008dc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <BSP_LED_Init+0x70>)
 800052a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <BSP_LED_Init+0x6c>)
 8000532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000536:	2200      	movs	r2, #0
 8000538:	4619      	mov	r1, r3
 800053a:	f000 fb46 	bl	8000bca <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0800292c 	.word	0x0800292c
 800054c:	20000410 	.word	0x20000410

08000550 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4a07      	ldr	r2, [pc, #28]	@ (800057c <BSP_LED_Toggle+0x2c>)
 800055e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4906      	ldr	r1, [pc, #24]	@ (8000580 <BSP_LED_Toggle+0x30>)
 8000566:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800056a:	4619      	mov	r1, r3
 800056c:	4610      	mov	r0, r2
 800056e:	f000 fb43 	bl	8000bf8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000410 	.word	0x20000410
 8000580:	0800292c 	.word	0x0800292c

08000584 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059a:	2003      	movs	r0, #3
 800059c:	f000 f95e 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80005a0:	f001 fb7c 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <HAL_Init+0x3c>)
 80005a8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f810 	bl	80005d0 <HAL_InitTick>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e001      	b.n	80005c0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005bc:	f7ff ff42 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000041c 	.word	0x2000041c

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <HAL_InitTick+0x6c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d024      	beq.n	800062e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005e4:	f001 fb5a 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <HAL_InitTick+0x6c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f960 	bl	80008c2 <HAL_SYSTICK_Config>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10f      	bne.n	8000628 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d809      	bhi.n	8000622 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060e:	2200      	movs	r2, #0
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	f04f 30ff 	mov.w	r0, #4294967295
 8000616:	f000 f92c 	bl	8000872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <HAL_InitTick+0x70>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e007      	b.n	8000632 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e004      	b.n	8000632 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e001      	b.n	8000632 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000424 	.word	0x20000424
 8000640:	20000420 	.word	0x20000420

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	@ (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000424 	.word	0x20000424
 8000664:	2000045c 	.word	0x2000045c

08000668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	@ (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	2000045c 	.word	0x2000045c

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000424 	.word	0x20000424

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	@ (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	@ (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	@ (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	@ 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	@ 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff90 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2d 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff44 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff92 	bl	80007b4 <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff61 	bl	8000760 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff37 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa4 	bl	8000818 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e140      	b.n	8000b6e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 8132 	beq.w	8000b68 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	2b01      	cmp	r3, #1
 800090e:	d005      	beq.n	800091c <HAL_GPIO_Init+0x40>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b02      	cmp	r3, #2
 800091a:	d130      	bne.n	800097e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	2203      	movs	r2, #3
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000952:	2201      	movs	r2, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	091b      	lsrs	r3, r3, #4
 8000968:	f003 0201 	and.w	r2, r3, #1
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	2b03      	cmp	r3, #3
 8000988:	d017      	beq.n	80009ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4013      	ands	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d123      	bne.n	8000a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	08da      	lsrs	r2, r3, #3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3208      	adds	r2, #8
 80009ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	691a      	ldr	r2, [r3, #16]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	6939      	ldr	r1, [r7, #16]
 8000a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0203 	and.w	r2, r3, #3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 808c 	beq.w	8000b68 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a50:	4a4e      	ldr	r2, [pc, #312]	@ (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3302      	adds	r3, #2
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	2207      	movs	r2, #7
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a7a:	d00d      	beq.n	8000a98 <HAL_GPIO_Init+0x1bc>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <HAL_GPIO_Init+0x2b4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x1b8>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a43      	ldr	r2, [pc, #268]	@ (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <HAL_GPIO_Init+0x1b4>
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	e004      	b.n	8000a9a <HAL_GPIO_Init+0x1be>
 8000a90:	2307      	movs	r3, #7
 8000a92:	e002      	b.n	8000a9a <HAL_GPIO_Init+0x1be>
 8000a94:	2301      	movs	r3, #1
 8000a96:	e000      	b.n	8000a9a <HAL_GPIO_Init+0x1be>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	f002 0203 	and.w	r2, r2, #3
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	4093      	lsls	r3, r2
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aaa:	4938      	ldr	r1, [pc, #224]	@ (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab8:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000adc:	4a2e      	ldr	r2, [pc, #184]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b06:	4a24      	ldr	r2, [pc, #144]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b12:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000b32:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000b40:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f47f aeb7 	bne.w	80008ec <HAL_GPIO_Init+0x10>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800
 8000b98:	58000800 	.word	0x58000800

08000b9c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e001      	b.n	8000bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bda:	787b      	ldrb	r3, [r7, #1]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000be0:	887a      	ldrh	r2, [r7, #2]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43d9      	mvns	r1, r3
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	400b      	ands	r3, r1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	619a      	str	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbdc 	bl	8000408 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	58000800 	.word	0x58000800

08000c5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a03      	ldr	r2, [pc, #12]	@ (8000c74 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	58000400 	.word	0x58000400

08000c78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_PWREx_GetVoltageRange+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	58000400 	.word	0x58000400

08000c90 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ca0:	d101      	bne.n	8000ca6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	58000400 	.word	0x58000400

08000cb4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000cfe:	d101      	bne.n	8000d04 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000d58:	d101      	bne.n	8000d5e <LL_RCC_HSE_IsReady+0x18>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <LL_RCC_HSE_IsReady+0x1a>
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000db2:	d101      	bne.n	8000db8 <LL_RCC_HSI_IsReady+0x18>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <LL_RCC_HSI_IsReady+0x1a>
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	061b      	lsls	r3, r3, #24
 8000dd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d101      	bne.n	8000e02 <LL_RCC_LSE_IsReady+0x18>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <LL_RCC_LSE_IsReady+0x1a>
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d101      	bne.n	8000e64 <LL_RCC_LSI_IsReady+0x18>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <LL_RCC_LSI_IsReady+0x1a>
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	6013      	str	r3, [r2, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d101      	bne.n	8000ebc <LL_RCC_MSI_IsReady+0x16>
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <LL_RCC_MSI_IsReady+0x18>
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d101      	bne.n	8000edc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f023 0203 	bic.w	r2, r3, #3
 8000f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	608b      	str	r3, [r1, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	608b      	str	r3, [r1, #8]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000faa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000fd8:	f023 020f 	bic.w	r2, r3, #15
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800102c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4313      	orrs	r3, r2
 8001034:	608b      	str	r3, [r1, #8]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800105a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800105e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800109a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80010ba:	d101      	bne.n	80010c0 <LL_RCC_PLL_IsReady+0x18>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <LL_RCC_PLL_IsReady+0x1a>
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 0303 	and.w	r3, r3, #3
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001136:	d101      	bne.n	800113c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800115a:	d101      	bne.n	8001160 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001172:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117e:	d101      	bne.n	8001184 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80011a0:	d101      	bne.n	80011a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80011b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80011c2:	d101      	bne.n	80011c8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e36f      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e6:	f7ff febc 	bl	8000f62 <LL_RCC_GetSysClkSource>
 80011ea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ec:	f7ff ff8f 	bl	800110e <LL_RCC_PLL_GetMainSource>
 80011f0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80c4 	beq.w	8001388 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x3e>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	2b0c      	cmp	r3, #12
 800120a:	d176      	bne.n	80012fa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d173      	bne.n	80012fa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e353      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_OscConfig+0x68>
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800123a:	e006      	b.n	800124a <HAL_RCC_OscConfig+0x76>
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800124a:	4293      	cmp	r3, r2
 800124c:	d222      	bcs.n	8001294 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fd36 	bl	8001cc4 <RCC_SetFlashLatencyFromMSIRange>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e331      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe41 	bl	8000f14 <LL_RCC_MSI_SetCalibTrimming>
 8001292:	e021      	b.n	80012d8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe28 	bl	8000f14 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fcfb 	bl	8001cc4 <RCC_SetFlashLatencyFromMSIRange>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e2f6      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012d8:	f000 fce0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 80012dc:	4603      	mov	r3, r0
 80012de:	4aa7      	ldr	r2, [pc, #668]	@ (800157c <HAL_RCC_OscConfig+0x3a8>)
 80012e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80012e2:	4ba7      	ldr	r3, [pc, #668]	@ (8001580 <HAL_RCC_OscConfig+0x3ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f972 	bl	80005d0 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80012f0:	7cfb      	ldrb	r3, [r7, #19]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d047      	beq.n	8001386 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	e2e5      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d02c      	beq.n	800135c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001302:	f7ff fdb4 	bl	8000e6e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001306:	f7ff f9af 	bl	8000668 <HAL_GetTick>
 800130a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130e:	f7ff f9ab 	bl	8000668 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e2d2      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001320:	f7ff fdc1 	bl	8000ea6 <LL_RCC_MSI_IsReady>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f1      	beq.n	800130e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fddd 	bl	8000f14 <LL_RCC_MSI_SetCalibTrimming>
 800135a:	e015      	b.n	8001388 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800135c:	f7ff fd95 	bl	8000e8a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001360:	f7ff f982 	bl	8000668 <HAL_GetTick>
 8001364:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001368:	f7ff f97e 	bl	8000668 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e2a5      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800137a:	f7ff fd94 	bl	8000ea6 <LL_RCC_MSI_IsReady>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f1      	bne.n	8001368 <HAL_RCC_OscConfig+0x194>
 8001384:	e000      	b.n	8001388 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001386:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d058      	beq.n	8001446 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d108      	bne.n	80013b2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d105      	bne.n	80013b2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d14b      	bne.n	8001446 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e289      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d0:	d102      	bne.n	80013d8 <HAL_RCC_OscConfig+0x204>
 80013d2:	f7ff fc9c 	bl	8000d0e <LL_RCC_HSE_Enable>
 80013d6:	e00d      	b.n	80013f4 <HAL_RCC_OscConfig+0x220>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80013e0:	d104      	bne.n	80013ec <HAL_RCC_OscConfig+0x218>
 80013e2:	f7ff fc67 	bl	8000cb4 <LL_RCC_HSE_EnableTcxo>
 80013e6:	f7ff fc92 	bl	8000d0e <LL_RCC_HSE_Enable>
 80013ea:	e003      	b.n	80013f4 <HAL_RCC_OscConfig+0x220>
 80013ec:	f7ff fc9d 	bl	8000d2a <LL_RCC_HSE_Disable>
 80013f0:	f7ff fc6e 	bl	8000cd0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d012      	beq.n	8001422 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff f934 	bl	8000668 <HAL_GetTick>
 8001400:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff f930 	bl	8000668 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e257      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001416:	f7ff fc96 	bl	8000d46 <LL_RCC_HSE_IsReady>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f1      	beq.n	8001404 <HAL_RCC_OscConfig+0x230>
 8001420:	e011      	b.n	8001446 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff f921 	bl	8000668 <HAL_GetTick>
 8001426:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142a:	f7ff f91d 	bl	8000668 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b64      	cmp	r3, #100	@ 0x64
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e244      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800143c:	f7ff fc83 	bl	8000d46 <LL_RCC_HSE_IsReady>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f1      	bne.n	800142a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d046      	beq.n	80014e0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	2b04      	cmp	r3, #4
 8001456:	d005      	beq.n	8001464 <HAL_RCC_OscConfig+0x290>
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	d10e      	bne.n	800147c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e22a      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fca4 	bl	8000dc2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800147a:	e031      	b.n	80014e0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d019      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001484:	f7ff fc70 	bl	8000d68 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff f8ee 	bl	8000668 <HAL_GetTick>
 800148c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff f8ea 	bl	8000668 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e211      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80014a2:	f7ff fc7d 	bl	8000da0 <LL_RCC_HSI_IsReady>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f1      	beq.n	8001490 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fc86 	bl	8000dc2 <LL_RCC_HSI_SetCalibTrimming>
 80014b6:	e013      	b.n	80014e0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b8:	f7ff fc64 	bl	8000d84 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff f8d4 	bl	8000668 <HAL_GetTick>
 80014c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff f8d0 	bl	8000668 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e1f7      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80014d6:	f7ff fc63 	bl	8000da0 <LL_RCC_HSI_IsReady>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f1      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d06e      	beq.n	80015ca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d056      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014fc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	429a      	cmp	r2, r3
 800150a:	d031      	beq.n	8001570 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e1d0      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d013      	beq.n	8001556 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800152e:	f7ff fc7d 	bl	8000e2c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001532:	f7ff f899 	bl	8000668 <HAL_GetTick>
 8001536:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff f895 	bl	8000668 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b11      	cmp	r3, #17
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1bc      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800154c:	f7ff fc7e 	bl	8000e4c <LL_RCC_LSI_IsReady>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f1      	bne.n	800153a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155e:	f023 0210 	bic.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800156a:	4313      	orrs	r3, r2
 800156c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001570:	f7ff fc4c 	bl	8000e0c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff f878 	bl	8000668 <HAL_GetTick>
 8001578:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800157a:	e00c      	b.n	8001596 <HAL_RCC_OscConfig+0x3c2>
 800157c:	2000041c 	.word	0x2000041c
 8001580:	20000420 	.word	0x20000420
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff f870 	bl	8000668 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b11      	cmp	r3, #17
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e197      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001596:	f7ff fc59 	bl	8000e4c <LL_RCC_LSI_IsReady>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f1      	beq.n	8001584 <HAL_RCC_OscConfig+0x3b0>
 80015a0:	e013      	b.n	80015ca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	f7ff fc43 	bl	8000e2c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff f85f 	bl	8000668 <HAL_GetTick>
 80015aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff f85b 	bl	8000668 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b11      	cmp	r3, #17
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e182      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80015c0:	f7ff fc44 	bl	8000e4c <LL_RCC_LSI_IsReady>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f1      	bne.n	80015ae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80d8 	beq.w	8001788 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015d8:	f7ff fb5a 	bl	8000c90 <LL_PWR_IsEnabledBkUpAccess>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80015e2:	f7ff fb3b 	bl	8000c5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff f83f 	bl	8000668 <HAL_GetTick>
 80015ea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ee:	f7ff f83b 	bl	8000668 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e162      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001600:	f7ff fb46 	bl	8000c90 <LL_PWR_IsEnabledBkUpAccess>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f1      	beq.n	80015ee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d07b      	beq.n	800170a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b85      	cmp	r3, #133	@ 0x85
 8001618:	d003      	beq.n	8001622 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d109      	bne.n	8001636 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f817 	bl	8000668 <HAL_GetTick>
 800163a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff f809 	bl	8000668 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e12e      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001668:	f7ff fbbf 	bl	8000dea <LL_RCC_LSE_IsReady>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0ef      	beq.n	8001652 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b81      	cmp	r3, #129	@ 0x81
 8001678:	d003      	beq.n	8001682 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b85      	cmp	r3, #133	@ 0x85
 8001680:	d121      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7fe fff1 	bl	8000668 <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7fe ffe3 	bl	8000668 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e108      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ec      	beq.n	800169e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80016c4:	e060      	b.n	8001788 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7fe ffcf 	bl	8000668 <HAL_GetTick>
 80016ca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7fe ffc1 	bl	8000668 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0e6      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ec      	bne.n	80016e2 <HAL_RCC_OscConfig+0x50e>
 8001708:	e03e      	b.n	8001788 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7fe ffad 	bl	8000668 <HAL_GetTick>
 800170e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800171c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7fe ff9f 	bl	8000668 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0c4      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ec      	bne.n	8001726 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7fe ff8c 	bl	8000668 <HAL_GetTick>
 8001750:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7fe ff7e 	bl	8000668 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0a3      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800177e:	f7ff fb34 	bl	8000dea <LL_RCC_LSE_IsReady>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ef      	bne.n	8001768 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8099 	beq.w	80018c4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d06c      	beq.n	8001872 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	2b02      	cmp	r3, #2
 800179e:	d14b      	bne.n	8001838 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a0:	f7ff fc74 	bl	800108c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7fe ff60 	bl	8000668 <HAL_GetTick>
 80017a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7fe ff5c 	bl	8000668 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e083      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80017be:	f7ff fc73 	bl	80010a8 <LL_RCC_PLL_IsReady>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f1      	bne.n	80017ac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	4b40      	ldr	r3, [pc, #256]	@ (80018d0 <HAL_RCC_OscConfig+0x6fc>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017da:	4311      	orrs	r1, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017e0:	0212      	lsls	r2, r2, #8
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017f4:	430a      	orrs	r2, r1
 80017f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fe:	f7ff fc37 	bl	8001070 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001810:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7fe ff29 	bl	8000668 <HAL_GetTick>
 8001816:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7fe ff25 	bl	8000668 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b0a      	cmp	r3, #10
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e04c      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800182c:	f7ff fc3c 	bl	80010a8 <LL_RCC_PLL_IsReady>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f1      	beq.n	800181a <HAL_RCC_OscConfig+0x646>
 8001836:	e045      	b.n	80018c4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	f7ff fc28 	bl	800108c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7fe ff14 	bl	8000668 <HAL_GetTick>
 8001840:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7fe ff10 	bl	8000668 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b0a      	cmp	r3, #10
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e037      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001856:	f7ff fc27 	bl	80010a8 <LL_RCC_PLL_IsReady>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f1      	bne.n	8001844 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <HAL_RCC_OscConfig+0x700>)
 800186c:	4013      	ands	r3, r2
 800186e:	60cb      	str	r3, [r1, #12]
 8001870:	e028      	b.n	80018c4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e023      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800187e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	429a      	cmp	r2, r3
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189e:	429a      	cmp	r2, r3
 80018a0:	d10e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	11c1808c 	.word	0x11c1808c
 80018d4:	eefefffc 	.word	0xeefefffc

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e12c      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b98      	ldr	r3, [pc, #608]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d91b      	bls.n	8001932 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b95      	ldr	r3, [pc, #596]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4993      	ldr	r1, [pc, #588]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190a:	f7fe fead 	bl	8000668 <HAL_GetTick>
 800190e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001910:	e008      	b.n	8001924 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001912:	f7fe fea9 	bl	8000668 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e110      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001924:	4b8a      	ldr	r3, [pc, #552]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d1ef      	bne.n	8001912 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fb18 	bl	8000f78 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001948:	f7fe fe8e 	bl	8000668 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001950:	f7fe fe8a 	bl	8000668 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0f1      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001962:	f7ff fbdf 	bl	8001124 <LL_RCC_IsActiveFlag_HPRE>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f1      	beq.n	8001950 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb0e 	bl	8000f9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001982:	f7fe fe71 	bl	8000668 <HAL_GetTick>
 8001986:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800198a:	f7fe fe6d 	bl	8000668 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0d4      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800199c:	f7ff fbd3 	bl	8001146 <LL_RCC_IsActiveFlag_C2HPRE>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f1      	beq.n	800198a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb06 	bl	8000fc8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019bc:	f7fe fe54 	bl	8000668 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019c4:	f7fe fe50 	bl	8000668 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0b7      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80019d6:	f7ff fbc8 	bl	800116a <LL_RCC_IsActiveFlag_SHDHPRE>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f1      	beq.n	80019c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d016      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff faff 	bl	8000ff4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80019f6:	f7fe fe37 	bl	8000668 <HAL_GetTick>
 80019fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80019fe:	f7fe fe33 	bl	8000668 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e09a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001a10:	f7ff fbbd 	bl	800118e <LL_RCC_IsActiveFlag_PPRE1>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f1      	beq.n	80019fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d017      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff faf4 	bl	800101a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001a32:	f7fe fe19 	bl	8000668 <HAL_GetTick>
 8001a36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001a3a:	f7fe fe15 	bl	8000668 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e07c      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001a4c:	f7ff fbb0 	bl	80011b0 <LL_RCC_IsActiveFlag_PPRE2>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f1      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d043      	beq.n	8001aea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001a6a:	f7ff f96c 	bl	8000d46 <LL_RCC_HSE_IsReady>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11e      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e066      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001a80:	f7ff fb12 	bl	80010a8 <LL_RCC_PLL_IsReady>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d113      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e05b      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001a96:	f7ff fa06 	bl	8000ea6 <LL_RCC_MSI_IsReady>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d108      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e050      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001aa4:	f7ff f97c 	bl	8000da0 <LL_RCC_HSI_IsReady>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e049      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fa40 	bl	8000f3c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7fe fdd4 	bl	8000668 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7fe fdd0 	bl	8000668 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e035      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	f7ff fa42 	bl	8000f62 <LL_RCC_GetSysClkSource>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d1ec      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d21b      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 0207 	bic.w	r2, r3, #7
 8001b00:	4913      	ldr	r1, [pc, #76]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7fe fdae 	bl	8000668 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b10:	f7fe fdaa 	bl	8000668 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e011      	b.n	8001b46 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <HAL_RCC_ClockConfig+0x278>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1ef      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b30:	f000 f8b4 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_RCC_ClockConfig+0x27c>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <HAL_RCC_ClockConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd46 	bl	80005d0 <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	58004000 	.word	0x58004000
 8001b54:	2000041c 	.word	0x2000041c
 8001b58:	20000420 	.word	0x20000420

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6a:	f7ff f9fa 	bl	8000f62 <LL_RCC_GetSysClkSource>
 8001b6e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	f7ff facd 	bl	800110e <LL_RCC_PLL_GetMainSource>
 8001b74:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x2c>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d139      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d136      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b88:	f7ff f99d 	bl	8000ec6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x62>
 8001b92:	f7ff f998 	bl	8000ec6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x4e>
 8001b9c:	f7ff f9a3 	bl	8000ee6 <LL_RCC_MSI_GetRange>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	e005      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x5a>
 8001baa:	f7ff f9a7 	bl	8000efc <LL_RCC_MSI_GetRangeAfterStandby>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a36      	ldr	r2, [pc, #216]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x134>)
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x8c>
 8001bbe:	f7ff f982 	bl	8000ec6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x7a>
 8001bc8:	f7ff f98d 	bl	8000ee6 <LL_RCC_MSI_GetRange>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	e005      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x86>
 8001bd6:	f7ff f991 	bl	8000efc <LL_RCC_MSI_GetRangeAfterStandby>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a2b      	ldr	r2, [pc, #172]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x134>)
 8001be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d115      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bf4:	e012      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d102      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bfc:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e00c      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d109      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c08:	f7ff f870 	bl	8000cec <LL_RCC_HSE_IsEnabledDiv2>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e001      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c1a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c1c:	f7ff f9a1 	bl	8000f62 <LL_RCC_GetSysClkSource>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d12f      	bne.n	8001c86 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001c26:	f7ff fa72 	bl	800110e <LL_RCC_PLL_GetMainSource>
 8001c2a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0xde>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d003      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0xe4>
 8001c38:	e00d      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c3c:	60fb      	str	r3, [r7, #12]
        break;
 8001c3e:	e00d      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001c40:	f7ff f854 	bl	8000cec <LL_RCC_HSE_IsEnabledDiv2>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c4c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c52:	60fb      	str	r3, [r7, #12]
        break;
 8001c54:	e002      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	60fb      	str	r3, [r7, #12]
        break;
 8001c5a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c5c:	f7ff fa35 	bl	80010ca <LL_RCC_PLL_GetN>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	fb03 f402 	mul.w	r4, r3, r2
 8001c68:	f7ff fa46 	bl	80010f8 <LL_RCC_PLL_GetDivider>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	3301      	adds	r3, #1
 8001c72:	fbb4 f4f3 	udiv	r4, r4, r3
 8001c76:	f7ff fa34 	bl	80010e2 <LL_RCC_PLL_GetR>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	0f5b      	lsrs	r3, r3, #29
 8001c7e:	3301      	adds	r3, #1
 8001c80:	fbb4 f3f3 	udiv	r3, r4, r3
 8001c84:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001c86:	697b      	ldr	r3, [r7, #20]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	08002974 	.word	0x08002974
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	01e84800 	.word	0x01e84800

08001c9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b598      	push	{r3, r4, r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ca0:	f7ff ff5c 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f7ff f9cb 	bl	8001040 <LL_RCC_GetAHBPrescaler>
 8001caa:	4603      	mov	r3, r0
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a03      	ldr	r2, [pc, #12]	@ (8001cc0 <HAL_RCC_GetHCLKFreq+0x24>)
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd98      	pop	{r3, r4, r7, pc}
 8001cc0:	08002934 	.word	0x08002934

08001cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001cdc:	f7ff f9bb 	bl	8001056 <LL_RCC_GetAHB3Prescaler>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4a09      	ldr	r2, [pc, #36]	@ (8001d20 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0c9c      	lsrs	r4, r3, #18
 8001d00:	f7fe ffba 	bl	8000c78 <HAL_PWREx_GetVoltageRange>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f000 f80b 	bl	8001d24 <RCC_SetFlashLatency>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	08002974 	.word	0x08002974
 8001d1c:	08002934 	.word	0x08002934
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	@ 0x38
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e18 <RCC_SetFlashLatency+0xf4>)
 8001d30:	f107 0320 	add.w	r3, r7, #32
 8001d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d38:	6018      	str	r0, [r3, #0]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001d3e:	4a37      	ldr	r2, [pc, #220]	@ (8001e1c <RCC_SetFlashLatency+0xf8>)
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d48:	6018      	str	r0, [r3, #0]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001d4e:	4a34      	ldr	r2, [pc, #208]	@ (8001e20 <RCC_SetFlashLatency+0xfc>)
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d56:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d64:	d11b      	bne.n	8001d9e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d6a:	e014      	b.n	8001d96 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	3338      	adds	r3, #56	@ 0x38
 8001d72:	443b      	add	r3, r7
 8001d74:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d807      	bhi.n	8001d90 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	3338      	adds	r3, #56	@ 0x38
 8001d86:	443b      	add	r3, r7
 8001d88:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001d8e:	e021      	b.n	8001dd4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d92:	3301      	adds	r3, #1
 8001d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d9e7      	bls.n	8001d6c <RCC_SetFlashLatency+0x48>
 8001d9c:	e01a      	b.n	8001dd4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da2:	e014      	b.n	8001dce <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	3338      	adds	r3, #56	@ 0x38
 8001daa:	443b      	add	r3, r7
 8001dac:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d807      	bhi.n	8001dc8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3338      	adds	r3, #56	@ 0x38
 8001dbe:	443b      	add	r3, r7
 8001dc0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001dc6:	e005      	b.n	8001dd4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dca:	3301      	adds	r3, #1
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d9e7      	bls.n	8001da4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd4:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <RCC_SetFlashLatency+0x100>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4911      	ldr	r1, [pc, #68]	@ (8001e24 <RCC_SetFlashLatency+0x100>)
 8001dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001de4:	f7fe fc40 	bl	8000668 <HAL_GetTick>
 8001de8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dea:	e008      	b.n	8001dfe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001dec:	f7fe fc3c 	bl	8000668 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e007      	b.n	8001e0e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <RCC_SetFlashLatency+0x100>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1ef      	bne.n	8001dec <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3738      	adds	r7, #56	@ 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	080028f8 	.word	0x080028f8
 8001e1c:	08002900 	.word	0x08002900
 8001e20:	08002908 	.word	0x08002908
 8001e24:	58004000 	.word	0x58004000

08001e28 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <_DoInit+0x8c>)
 8001e30:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <_DoInit+0x90>)
 8001e42:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a1d      	ldr	r2, [pc, #116]	@ (8001ebc <_DoInit+0x94>)
 8001e48:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e50:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <_DoInit+0x90>)
 8001e68:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <_DoInit+0x98>)
 8001e6e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2210      	movs	r2, #16
 8001e74:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3307      	adds	r3, #7
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <_DoInit+0x9c>)
 8001e8e:	6810      	ldr	r0, [r2, #0]
 8001e90:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <_DoInit+0xa0>)
 8001e96:	6810      	ldr	r0, [r2, #0]
 8001e98:	6018      	str	r0, [r3, #0]
 8001e9a:	8891      	ldrh	r1, [r2, #4]
 8001e9c:	7992      	ldrb	r2, [r2, #6]
 8001e9e:	8099      	strh	r1, [r3, #4]
 8001ea0:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	719a      	strb	r2, [r3, #6]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000460 	.word	0x20000460
 8001eb8:	08002914 	.word	0x08002914
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000400 	.word	0x20000400
 8001ec4:	08002920 	.word	0x08002920
 8001ec8:	08002924 	.word	0x08002924

08001ecc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d905      	bls.n	8001efc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e007      	b.n	8001f0c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1acb      	subs	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	4293      	cmp	r3, r2
 8001f18:	bf28      	it	cs
 8001f1a:	4613      	movcs	r3, r2
 8001f1c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	bf28      	it	cs
 8001f26:	4613      	movcs	r3, r2
 8001f28:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	4413      	add	r3, r2
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fcaa 	bl	8002890 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	4413      	add	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d101      	bne.n	8001f6a <_WriteBlocking+0x9e>
      WrOff = 0u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1b5      	bne.n	8001ee2 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8001f76:	69bb      	ldr	r3, [r7, #24]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d90e      	bls.n	8001fc2 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fc6d 	bl	8002890 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	441a      	add	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8001fc0:	e01a      	b.n	8001ff8 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fc5c 	bl	8002890 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6858      	ldr	r0, [r3, #4]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4413      	add	r3, r2
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f000 fc4f 	bl	8002890 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	60da      	str	r2, [r3, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d808      	bhi.n	800202e <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad2      	subs	r2, r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	3b01      	subs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e004      	b.n	8002038 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002038:	697b      	ldr	r3, [r7, #20]
}
 800203a:	4618      	mov	r0, r3
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4a1f      	ldr	r2, [pc, #124]	@ (80020e0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d029      	beq.n	80020c2 <SEGGER_RTT_WriteNoLock+0x7e>
 800206e:	2b02      	cmp	r3, #2
 8002070:	d82e      	bhi.n	80020d0 <SEGGER_RTT_WriteNoLock+0x8c>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <SEGGER_RTT_WriteNoLock+0x38>
 8002076:	2b01      	cmp	r3, #1
 8002078:	d013      	beq.n	80020a2 <SEGGER_RTT_WriteNoLock+0x5e>
 800207a:	e029      	b.n	80020d0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800207c:	6978      	ldr	r0, [r7, #20]
 800207e:	f7ff ffbf 	bl	8002000 <_GetAvailWriteSpace>
 8002082:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d202      	bcs.n	8002092 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002090:	e021      	b.n	80020d6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	69b9      	ldr	r1, [r7, #24]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff70 	bl	8001f80 <_WriteNoCheck>
    break;
 80020a0:	e019      	b.n	80020d6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ffac 	bl	8002000 <_GetAvailWriteSpace>
 80020a8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4293      	cmp	r3, r2
 80020b0:	bf28      	it	cs
 80020b2:	4613      	movcs	r3, r2
 80020b4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	69b9      	ldr	r1, [r7, #24]
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff60 	bl	8001f80 <_WriteNoCheck>
    break;
 80020c0:	e009      	b.n	80020d6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff00 	bl	8001ecc <_WriteBlocking>
 80020cc:	61f8      	str	r0, [r7, #28]
    break;
 80020ce:	e002      	b.n	80020d6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    break;
 80020d4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80020d6:	69fb      	ldr	r3, [r7, #28]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000460 	.word	0x20000460

080020e4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <SEGGER_RTT_Write+0x44>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <SEGGER_RTT_Write+0x18>
 80020f8:	f7ff fe96 	bl	8001e28 <_DoInit>
  SEGGER_RTT_LOCK();
 80020fc:	f3ef 8311 	mrs	r3, BASEPRI
 8002100:	f04f 0120 	mov.w	r1, #32
 8002104:	f381 8811 	msr	BASEPRI, r1
 8002108:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff ff98 	bl	8002044 <SEGGER_RTT_WriteNoLock>
 8002114:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800211c:	693b      	ldr	r3, [r7, #16]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000460 	.word	0x20000460

0800212c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  _DoInit();
 8002130:	f7ff fe7a 	bl	8001e28 <_DoInit>
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d80e      	bhi.n	8002174 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d115      	bne.n	80021ac <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6918      	ldr	r0, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	461a      	mov	r2, r3
 800218e:	f7ff ffa9 	bl	80020e4 <SEGGER_RTT_Write>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d004      	beq.n	80021a6 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f04f 32ff 	mov.w	r2, #4294967295
 80021a2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80021a4:	e002      	b.n	80021ac <_StoreChar+0x74>
      p->Cnt = 0u;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80021c6:	2301      	movs	r3, #1
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80021ce:	e007      	b.n	80021e0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	623b      	str	r3, [r7, #32]
    Width++;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d2f3      	bcs.n	80021d0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d901      	bls.n	80021f4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80021f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d125      	bne.n	800224a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	2b00      	cmp	r3, #0
 8002202:	d022      	beq.n	800224a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <_PrintUnsigned+0x66>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_PrintUnsigned+0x66>
        c = '0';
 8002214:	2330      	movs	r3, #48	@ 0x30
 8002216:	76fb      	strb	r3, [r7, #27]
 8002218:	e001      	b.n	800221e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800221a:	2320      	movs	r3, #32
 800221c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800221e:	e00b      	b.n	8002238 <_PrintUnsigned+0x84>
        FieldWidth--;
 8002220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002222:	3b01      	subs	r3, #1
 8002224:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8002226:	7efb      	ldrb	r3, [r7, #27]
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff ff84 	bl	8002138 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db07      	blt.n	8002248 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <_PrintUnsigned+0x96>
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002242:	429a      	cmp	r2, r3
 8002244:	d3ec      	bcc.n	8002220 <_PrintUnsigned+0x6c>
 8002246:	e000      	b.n	800224a <_PrintUnsigned+0x96>
          break;
 8002248:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db55      	blt.n	80022fe <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d903      	bls.n	8002260 <_PrintUnsigned+0xac>
        NumDigits--;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	e009      	b.n	8002274 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d200      	bcs.n	8002274 <_PrintUnsigned+0xc0>
          break;
 8002272:	e005      	b.n	8002280 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	fb02 f303 	mul.w	r3, r2, r3
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800227e:	e7e8      	b.n	8002252 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8002298:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <_PrintUnsigned+0x154>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff ff48 	bl	8002138 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db08      	blt.n	80022c2 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80022b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1df      	bne.n	8002280 <_PrintUnsigned+0xcc>
 80022c0:	e000      	b.n	80022c4 <_PrintUnsigned+0x110>
        break;
 80022c2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80022c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d017      	beq.n	80022fe <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d014      	beq.n	80022fe <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80022d4:	e00a      	b.n	80022ec <_PrintUnsigned+0x138>
          FieldWidth--;
 80022d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d8:	3b01      	subs	r3, #1
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80022dc:	2120      	movs	r1, #32
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff ff2a 	bl	8002138 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db07      	blt.n	80022fc <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <_PrintUnsigned+0x14a>
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d3ed      	bcc.n	80022d6 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80022fa:	e000      	b.n	80022fe <_PrintUnsigned+0x14a>
            break;
 80022fc:	bf00      	nop
}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	@ 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	080029b4 	.word	0x080029b4

0800230c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	bfb8      	it	lt
 8002320:	425b      	neglt	r3, r3
 8002322:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002324:	2301      	movs	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002328:	e007      	b.n	800233a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002332:	613b      	str	r3, [r7, #16]
    Width++;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	daf3      	bge.n	800232a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d901      	bls.n	800234e <_PrintInt+0x42>
    Width = NumDigits;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <_PrintInt+0x5e>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db04      	blt.n	8002364 <_PrintInt+0x58>
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <_PrintInt+0x5e>
    FieldWidth--;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	3b01      	subs	r3, #1
 8002368:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <_PrintInt+0x6e>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01c      	beq.n	80023b4 <_PrintInt+0xa8>
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d117      	bne.n	80023b4 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d014      	beq.n	80023b4 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800238a:	e00a      	b.n	80023a2 <_PrintInt+0x96>
        FieldWidth--;
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	3b01      	subs	r3, #1
 8002390:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002392:	2120      	movs	r1, #32
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff fecf 	bl	8002138 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db07      	blt.n	80023b2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <_PrintInt+0xa8>
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3ed      	bcc.n	800238c <_PrintInt+0x80>
 80023b0:	e000      	b.n	80023b4 <_PrintInt+0xa8>
          break;
 80023b2:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db4a      	blt.n	8002452 <_PrintInt+0x146>
    if (v < 0) {
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da07      	bge.n	80023d2 <_PrintInt+0xc6>
      v = -v;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	425b      	negs	r3, r3
 80023c6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80023c8:	212d      	movs	r1, #45	@ 0x2d
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff feb4 	bl	8002138 <_StoreChar>
 80023d0:	e008      	b.n	80023e4 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80023dc:	212b      	movs	r1, #43	@ 0x2b
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff feaa 	bl	8002138 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db32      	blt.n	8002452 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01f      	beq.n	8002436 <_PrintInt+0x12a>
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11a      	bne.n	8002436 <_PrintInt+0x12a>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d117      	bne.n	8002436 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d014      	beq.n	8002436 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800240c:	e00a      	b.n	8002424 <_PrintInt+0x118>
            FieldWidth--;
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	3b01      	subs	r3, #1
 8002412:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8002414:	2130      	movs	r1, #48	@ 0x30
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff fe8e 	bl	8002138 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db07      	blt.n	8002434 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <_PrintInt+0x12a>
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3ed      	bcc.n	800240e <_PrintInt+0x102>
 8002432:	e000      	b.n	8002436 <_PrintInt+0x12a>
              break;
 8002434:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db09      	blt.n	8002452 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff feb1 	bl	80021b4 <_PrintUnsigned>
      }
    }
  }
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b092      	sub	sp, #72	@ 0x48
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  static char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8002468:	4bb4      	ldr	r3, [pc, #720]	@ (800273c <SEGGER_RTT_vprintf+0x2e0>)
 800246a:	613b      	str	r3, [r7, #16]
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	617b      	str	r3, [r7, #20]
  BufferDesc.Cnt            = 0u;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
  BufferDesc.RTTBufferIndex = BufferIndex;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	623b      	str	r3, [r7, #32]
  BufferDesc.ReturnValue    = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    sFormat++;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 800248a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 81a2 	beq.w	80027d8 <SEGGER_RTT_vprintf+0x37c>
      break;
    }
    if (c == '%') {
 8002494:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002498:	2b25      	cmp	r3, #37	@ 0x25
 800249a:	f040 8190 	bne.w	80027be <SEGGER_RTT_vprintf+0x362>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800249e:	2300      	movs	r3, #0
 80024a0:	633b      	str	r3, [r7, #48]	@ 0x30
      v = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      do {
        c = *sFormat;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        switch (c) {
 80024ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80024b2:	3b23      	subs	r3, #35	@ 0x23
 80024b4:	2b0d      	cmp	r3, #13
 80024b6:	d83f      	bhi.n	8002538 <SEGGER_RTT_vprintf+0xdc>
 80024b8:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <SEGGER_RTT_vprintf+0x64>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	08002529 	.word	0x08002529
 80024c4:	08002539 	.word	0x08002539
 80024c8:	08002539 	.word	0x08002539
 80024cc:	08002539 	.word	0x08002539
 80024d0:	08002539 	.word	0x08002539
 80024d4:	08002539 	.word	0x08002539
 80024d8:	08002539 	.word	0x08002539
 80024dc:	08002539 	.word	0x08002539
 80024e0:	08002519 	.word	0x08002519
 80024e4:	08002539 	.word	0x08002539
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08002539 	.word	0x08002539
 80024f0:	08002539 	.word	0x08002539
 80024f4:	08002509 	.word	0x08002509
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3301      	adds	r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	e01a      	b.n	800253e <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3301      	adds	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	e012      	b.n	800253e <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3301      	adds	r3, #1
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	e00a      	b.n	800253e <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	e002      	b.n	800253e <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8002538:	2300      	movs	r3, #0
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800253c:	bf00      	nop
        }
      } while (v);
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1b0      	bne.n	80024a6 <SEGGER_RTT_vprintf+0x4a>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
      do {
        c = *sFormat;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if ((c < '0') || (c > '9')) {
 8002550:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002554:	2b2f      	cmp	r3, #47	@ 0x2f
 8002556:	d912      	bls.n	800257e <SEGGER_RTT_vprintf+0x122>
 8002558:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800255c:	2b39      	cmp	r3, #57	@ 0x39
 800255e:	d80e      	bhi.n	800257e <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8002566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	461a      	mov	r2, r3
 8002572:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002576:	4413      	add	r3, r2
 8002578:	3b30      	subs	r3, #48	@ 0x30
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        c = *sFormat;
 800257c:	e7e4      	b.n	8002548 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
      c = *sFormat;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      if (c == '.') {
 800258a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800258e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002590:	d11d      	bne.n	80025ce <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3301      	adds	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          if ((c < '0') || (c > '9')) {
 80025a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80025a6:	d912      	bls.n	80025ce <SEGGER_RTT_vprintf+0x172>
 80025a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025ac:	2b39      	cmp	r3, #57	@ 0x39
 80025ae:	d80e      	bhi.n	80025ce <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80025b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	461a      	mov	r2, r3
 80025c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025c6:	4413      	add	r3, r2
 80025c8:	3b30      	subs	r3, #48	@ 0x30
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
          c = *sFormat;
 80025cc:	e7e4      	b.n	8002598 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      do {
        if ((c == 'l') || (c == 'h')) {
 80025d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025da:	2b6c      	cmp	r3, #108	@ 0x6c
 80025dc:	d003      	beq.n	80025e6 <SEGGER_RTT_vprintf+0x18a>
 80025de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025e2:	2b68      	cmp	r3, #104	@ 0x68
 80025e4:	d107      	bne.n	80025f6 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3301      	adds	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if ((c == 'l') || (c == 'h')) {
 80025f4:	e7ef      	b.n	80025d6 <SEGGER_RTT_vprintf+0x17a>
      // Handle specifiers
      //



      switch (c) {
 80025f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025fa:	2b25      	cmp	r3, #37	@ 0x25
 80025fc:	f000 80d3 	beq.w	80027a6 <SEGGER_RTT_vprintf+0x34a>
 8002600:	2b25      	cmp	r3, #37	@ 0x25
 8002602:	f2c0 80d7 	blt.w	80027b4 <SEGGER_RTT_vprintf+0x358>
 8002606:	2b78      	cmp	r3, #120	@ 0x78
 8002608:	f300 80d4 	bgt.w	80027b4 <SEGGER_RTT_vprintf+0x358>
 800260c:	2b58      	cmp	r3, #88	@ 0x58
 800260e:	f2c0 80d1 	blt.w	80027b4 <SEGGER_RTT_vprintf+0x358>
 8002612:	3b58      	subs	r3, #88	@ 0x58
 8002614:	2b20      	cmp	r3, #32
 8002616:	f200 80cd 	bhi.w	80027b4 <SEGGER_RTT_vprintf+0x358>
 800261a:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <SEGGER_RTT_vprintf+0x1c4>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002717 	.word	0x08002717
 8002624:	080027b5 	.word	0x080027b5
 8002628:	080027b5 	.word	0x080027b5
 800262c:	080027b5 	.word	0x080027b5
 8002630:	080027b5 	.word	0x080027b5
 8002634:	080027b5 	.word	0x080027b5
 8002638:	080027b5 	.word	0x080027b5
 800263c:	080027b5 	.word	0x080027b5
 8002640:	080027b5 	.word	0x080027b5
 8002644:	080027b5 	.word	0x080027b5
 8002648:	080027b5 	.word	0x080027b5
 800264c:	080026a5 	.word	0x080026a5
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080027b5 	.word	0x080027b5
 8002658:	080027b5 	.word	0x080027b5
 800265c:	080027b5 	.word	0x080027b5
 8002660:	080027b5 	.word	0x080027b5
 8002664:	080027b5 	.word	0x080027b5
 8002668:	080027b5 	.word	0x080027b5
 800266c:	080027b5 	.word	0x080027b5
 8002670:	080027b5 	.word	0x080027b5
 8002674:	080027b5 	.word	0x080027b5
 8002678:	080027b5 	.word	0x080027b5
 800267c:	080027b5 	.word	0x080027b5
 8002680:	08002781 	.word	0x08002781
 8002684:	080027b5 	.word	0x080027b5
 8002688:	080027b5 	.word	0x080027b5
 800268c:	08002741 	.word	0x08002741
 8002690:	080027b5 	.word	0x080027b5
 8002694:	080026f1 	.word	0x080026f1
 8002698:	080027b5 	.word	0x080027b5
 800269c:	080027b5 	.word	0x080027b5
 80026a0:	08002717 	.word	0x08002717
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1d19      	adds	r1, r3, #4
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6011      	str	r1, [r2, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	63bb      	str	r3, [r7, #56]	@ 0x38
        c0 = (char)v;
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80026b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fd38 	bl	8002138 <_StoreChar>
        break;
 80026c8:	e075      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1d19      	adds	r1, r3, #4
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6011      	str	r1, [r2, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80026d8:	f107 0010 	add.w	r0, r7, #16
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e6:	220a      	movs	r2, #10
 80026e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026ea:	f7ff fe0f 	bl	800230c <_PrintInt>
        break;
 80026ee:	e062      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
      case 'u':
        v = va_arg(*pParamList, int);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1d19      	adds	r1, r3, #4
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	63bb      	str	r3, [r7, #56]	@ 0x38
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80026fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002700:	f107 0010 	add.w	r0, r7, #16
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270e:	220a      	movs	r2, #10
 8002710:	f7ff fd50 	bl	80021b4 <_PrintUnsigned>
        break;
 8002714:	e04f      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	1d19      	adds	r1, r3, #4
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6011      	str	r1, [r2, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	63bb      	str	r3, [r7, #56]	@ 0x38
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8002724:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002726:	f107 0010 	add.w	r0, r7, #16
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002734:	2210      	movs	r2, #16
 8002736:	f7ff fd3d 	bl	80021b4 <_PrintUnsigned>
        break;
 800273a:	e03c      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
 800273c:	20000508 	.word	0x20000508
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1d19      	adds	r1, r3, #4
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
          do {
            c = *s;
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            s++;
 8002756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002758:	3301      	adds	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (c == '\0') {
 800275c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00b      	beq.n	800277c <SEGGER_RTT_vprintf+0x320>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8002764:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fce2 	bl	8002138 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	dae9      	bge.n	800274e <SEGGER_RTT_vprintf+0x2f2>
        }
        break;
 800277a:	e01c      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
              break;
 800277c:	bf00      	nop
        break;
 800277e:	e01a      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
      case 'p':
        v = va_arg(*pParamList, int);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1d19      	adds	r1, r3, #4
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6011      	str	r1, [r2, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	63bb      	str	r3, [r7, #56]	@ 0x38
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800278e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002790:	f107 0010 	add.w	r0, r7, #16
 8002794:	2300      	movs	r3, #0
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2308      	movs	r3, #8
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2308      	movs	r3, #8
 800279e:	2210      	movs	r2, #16
 80027a0:	f7ff fd08 	bl	80021b4 <_PrintUnsigned>
        break;
 80027a4:	e007      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	2125      	movs	r1, #37	@ 0x25
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fcc3 	bl	8002138 <_StoreChar>
        break;
 80027b2:	e000      	b.n	80027b6 <SEGGER_RTT_vprintf+0x35a>
      default:
        break;
 80027b4:	bf00      	nop
      }
      sFormat++;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	e007      	b.n	80027ce <SEGGER_RTT_vprintf+0x372>
    } else {
      _StoreChar(&BufferDesc, c);
 80027be:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fcb5 	bl	8002138 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f6bf ae53 	bge.w	800247c <SEGGER_RTT_vprintf+0x20>
 80027d6:	e000      	b.n	80027da <SEGGER_RTT_vprintf+0x37e>
      break;
 80027d8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dd0c      	ble.n	80027fa <SEGGER_RTT_vprintf+0x39e>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <SEGGER_RTT_vprintf+0x396>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4906      	ldr	r1, [pc, #24]	@ (8002804 <SEGGER_RTT_vprintf+0x3a8>)
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fc79 	bl	80020e4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]
  }
  return BufferDesc.ReturnValue;
 80027fa:	69fb      	ldr	r3, [r7, #28]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3740      	adds	r7, #64	@ 0x40
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000508 	.word	0x20000508

08002808 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8002808:	b40e      	push	{r1, r2, r3}
 800280a:	b580      	push	{r7, lr}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	461a      	mov	r2, r3
 800281e:	69f9      	ldr	r1, [r7, #28]
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe1b 	bl	800245c <SEGGER_RTT_vprintf>
 8002826:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8002828:	68fb      	ldr	r3, [r7, #12]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002834:	b003      	add	sp, #12
 8002836:	4770      	bx	lr

08002838 <memset>:
 8002838:	4402      	add	r2, r0
 800283a:	4603      	mov	r3, r0
 800283c:	4293      	cmp	r3, r2
 800283e:	d100      	bne.n	8002842 <memset+0xa>
 8002840:	4770      	bx	lr
 8002842:	f803 1b01 	strb.w	r1, [r3], #1
 8002846:	e7f9      	b.n	800283c <memset+0x4>

08002848 <__libc_init_array>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4d0d      	ldr	r5, [pc, #52]	@ (8002880 <__libc_init_array+0x38>)
 800284c:	4c0d      	ldr	r4, [pc, #52]	@ (8002884 <__libc_init_array+0x3c>)
 800284e:	1b64      	subs	r4, r4, r5
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	2600      	movs	r6, #0
 8002854:	42a6      	cmp	r6, r4
 8002856:	d109      	bne.n	800286c <__libc_init_array+0x24>
 8002858:	4d0b      	ldr	r5, [pc, #44]	@ (8002888 <__libc_init_array+0x40>)
 800285a:	4c0c      	ldr	r4, [pc, #48]	@ (800288c <__libc_init_array+0x44>)
 800285c:	f000 f826 	bl	80028ac <_init>
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	2600      	movs	r6, #0
 8002866:	42a6      	cmp	r6, r4
 8002868:	d105      	bne.n	8002876 <__libc_init_array+0x2e>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
 800286c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002870:	4798      	blx	r3
 8002872:	3601      	adds	r6, #1
 8002874:	e7ee      	b.n	8002854 <__libc_init_array+0xc>
 8002876:	f855 3b04 	ldr.w	r3, [r5], #4
 800287a:	4798      	blx	r3
 800287c:	3601      	adds	r6, #1
 800287e:	e7f2      	b.n	8002866 <__libc_init_array+0x1e>
 8002880:	080029c8 	.word	0x080029c8
 8002884:	080029c8 	.word	0x080029c8
 8002888:	080029c8 	.word	0x080029c8
 800288c:	080029cc 	.word	0x080029cc

08002890 <memcpy>:
 8002890:	440a      	add	r2, r1
 8002892:	4291      	cmp	r1, r2
 8002894:	f100 33ff 	add.w	r3, r0, #4294967295
 8002898:	d100      	bne.n	800289c <memcpy+0xc>
 800289a:	4770      	bx	lr
 800289c:	b510      	push	{r4, lr}
 800289e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a6:	4291      	cmp	r1, r2
 80028a8:	d1f9      	bne.n	800289e <memcpy+0xe>
 80028aa:	bd10      	pop	{r4, pc}

080028ac <_init>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr

080028b8 <_fini>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	bf00      	nop
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr
 80028c4:	0000      	movs	r0, r0
	...
